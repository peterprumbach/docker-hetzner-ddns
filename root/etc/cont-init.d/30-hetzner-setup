#!/usr/bin/with-contenv sh

. /app/hetzner.sh

# Load ZONE and SUBDOMAIN vars from Docker Swarm secrets, if available:
if [ -f "$SUBDOMAIN_FILE" ]; then
    SUBDOMAIN=$(cat $SUBDOMAIN_FILE)
fi
if [ -f "$ZONE_FILE" ]; then
    ZONE=$(cat $ZONE_FILE)
fi

# Verify the $API_KEY env variables are valid
statusCode=$(verifyToken)

if [ "$statusCode" != "200" ]; then
  echo "----------------------------------------------------------------"
  echo "ERROR: Invalid Hetzner DNS Console Credentials - $statusCode"
  echo "----------------------------------------------------------------"
  echo "Make sure the API_KEY is correct. You can"
  echo "get your Hetzner DNS Console Token here:"
  echo "https://docs.hetzner.com/dns-console/dns/general/api-access-token"
  echo
  echo "----------------------------------------------------------------"
  exit 1
fi

# Get the ID of the zone from the Hetzner DNS Console API
HetznerZoneId=$(getZoneId)

if [ "$HetznerZoneId" == "null" ]; then
  echo "----------------------------------------------------------------"
  echo "ERROR: Zone for $ZONE was not found in your Hetzner DNS Console Account"
  echo "----------------------------------------------------------------"
  echo "Make sure the ZONE variable is correct and the domain exists"
  echo "in your Hetzner DNS Console account. You can add a new domain here:"
  echo
  echo "https://dns.hetzner.com/add-zone"
  echo "----------------------------------------------------------------"
  exit 1
fi

echo "DNS Zone: $ZONE ($HetznerZoneId)"

# Check we can get the current public ip address
PublicIpAddress=$(getPublicIpAddress)

if [ ! -z ${INTERFACE+x} ]; then
  PublicIpAddress=$(getLocalIpAddress)
fi

if [ "$PublicIpAddress" == "" ]; then
  echo "----------------------------------------------------------------"
  if [ "$RRTYPE" == "AAAA" ]; then
    echo "ERROR: Failed To Get Public IPv6 Address"
    echo "----------------------------------------------------------------"
    echo "You must be running Docker with IPv6 support enabled or this"
    echo "container with host networking enabled."
    echo
    echo "Add '--net=host' to your docker run command or if using"
    echo "docker-compose add 'network_mode: host' to this service."
  else
    echo "ERROR: Failed To Get Public IPv4 Address"
  fi
  echo "----------------------------------------------------------------"
  exit 1
fi

# Get the ID of the dns record from the Hetzner DNS Console API
HetznerDnsRecordName=$(getDnsRecordName)
HetznerDnsRecordId=$(getDnsRecordId $HetznerZoneId $HetznerDnsRecordName)

# If the dns record does not exist, create it now.
if [ "$HetznerDnsRecordId" == "" ]; then
  echo "DNS record for '$HetznerDnsRecordName' was not found in $ZONE zone. Creating now..."
  HetznerDnsRecordId=$(createDnsRecord $HetznerZoneId $HetznerDnsRecordName $PublicIpAddress)

  if [ "$HetznerDnsRecordId" == "" ]; then
    echo "----------------------------------------------------------------"
    echo "ERROR: Failed to create DNS record '$HetznerDnsRecordName'"
    echo "----------------------------------------------------------------"
    exit 1
  fi

fi

echo "DNS Record: $HetznerDnsRecordName ($HetznerDnsRecordId)"
mkdir -p /config
echo "HETZNER_ZONE_ID=\"$HetznerZoneId\" HETZNER_RECORD_ID=\"$HetznerDnsRecordId\" HETZNER_RECORD_NAME=\"$HetznerDnsRecordName\"" > /config/hetzner.conf
echo "$CRON	/etc/cont-init.d/50-ddns" > /var/spool/cron/crontabs/root